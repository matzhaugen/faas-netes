apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.0
  creationTimestamp: null
  name: profiles.openfaas.com
spec:
  group: openfaas.com
  names:
    kind: Profile
    listKind: ProfileList
    plural: profiles
    singular: profile
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Profile and ProfileSpec are used to customise the Pod template for functions
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: 'ProfileSpec is an openfaas api extensions that can be predefined and applied to functions by annotating them with `com.openfaas/profile: name1,name2`'
            properties:
              affinity:
                description: "If specified, the pod's scheduling constraints \n copied to the Pod Affinity, this will replace any existing value or previously applied Profile. We use a replacement strategy because it is not clear that merging affinities will actually produce a meaning Affinity definition, it would likely result in an impossible to satisfy constraint"
                properties:
                  nodeAffinity:
                    description: Describes node affinity scheduling rules for the pod.
                    properties:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
                        items:
                          description: An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
                          properties:
                            preference:
                              description: A node selector term, associated with the corresponding weight.
                              properties:
                                matchExpressions:
                                  description: A list of node selector requirements by node's labels.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchFields:
                                  description: A list of node selector requirements by node's fields.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                              type: object
                            weight:
                              description: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                              format: int32
                              type: integer
                          required:
                          - preference
                          - weight
                          type: object
                        type: array
                      requiredDuringSchedulingIgnoredDuringExecution:
                        description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
                        properties:
                          nodeSelectorTerms:
                            description: Required. A list of node selector terms. The terms are ORed.
                            items:
                              description: A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                              properties:
                                matchExpressions:
                                  description: A list of node selector requirements by node's labels.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchFields:
                                  description: A list of node selector requirements by node's fields.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                              type: object
                            type: array
                        required:
                        - nodeSelectorTerms
                        type: object
                    type: object
                  podAffinity:
                    description: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                    properties:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                        items:
                          description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                          properties:
                            podAffinityTerm:
                              description: Required. A pod affinity term, associated with the corresponding weight.
                              properties:
                                labelSelector:
                                  description: A label query over a set of resources, in this case pods.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                                namespaces:
                                  description: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                                  items:
                                    type: string
                                  type: array
                                topologyKey:
                                  description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            weight:
                              description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                              format: int32
                              type: integer
                          required:
                          - podAffinityTerm
                          - weight
                          type: object
                        type: array
                      requiredDuringSchedulingIgnoredDuringExecution:
                        description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                        items:
                          description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                          properties:
                            labelSelector:
                              description: A label query over a set of resources, in this case pods.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            namespaces:
                              description: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                              items:
                                type: string
                              type: array
                            topologyKey:
                              description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                              type: string
                          required:
                          - topologyKey
                          type: object
                        type: array
                    type: object
                  podAntiAffinity:
                    description: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                    properties:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        description: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                        items:
                          description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                          properties:
                            podAffinityTerm:
                              description: Required. A pod affinity term, associated with the corresponding weight.
                              properties:
                                labelSelector:
                                  description: A label query over a set of resources, in this case pods.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                                namespaces:
                                  description: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                                  items:
                                    type: string
                                  type: array
                                topologyKey:
                                  description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            weight:
                              description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                              format: int32
                              type: integer
                          required:
                          - podAffinityTerm
                          - weight
                          type: object
                        type: array
                      requiredDuringSchedulingIgnoredDuringExecution:
                        description: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                        items:
                          description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                          properties:
                            labelSelector:
                              description: A label query over a set of resources, in this case pods.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            namespaces:
                              description: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                              items:
                                type: string
                              type: array
                            topologyKey:
                              description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                              type: string
                          required:
                          - topologyKey
                          type: object
                        type: array
                    type: object
                type: object
              podSecurityContext:
                description: "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field. \n each non-nil value will be merged into the function's PodSecurityContext, the value will replace any existing value or previously applied Profile"
                properties:
                  fsGroup:
                    description: "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: \n 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- \n If unset, the Kubelet will not modify the ownership and permissions of any volume."
                    format: int64
                    type: integer
                  fsGroupChangePolicy:
                    description: 'fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified defaults to "Always".'
                    type: string
                  runAsGroup:
                    description: The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
                    format: int64
                    type: integer
                  runAsNonRoot:
                    description: Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                    type: boolean
                  runAsUser:
                    description: The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
                    format: int64
                    type: integer
                  seLinuxOptions:
                    description: The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
                    properties:
                      level:
                        description: Level is SELinux level label that applies to the container.
                        type: string
                      role:
                        description: Role is a SELinux role label that applies to the container.
                        type: string
                      type:
                        description: Type is a SELinux type label that applies to the container.
                        type: string
                      user:
                        description: User is a SELinux user label that applies to the container.
                        type: string
                    type: object
                  supplementalGroups:
                    description: A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
                    items:
                      format: int64
                      type: integer
                    type: array
                  sysctls:
                    description: Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
                    items:
                      description: Sysctl defines a kernel parameter to be set
                      properties:
                        name:
                          description: Name of a property to set
                          type: string
                        value:
                          description: Value of a property to set
                          type: string
                      required:
                      - name
                      - value
                      type: object
                    type: array
                  windowsOptions:
                    description: The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                    properties:
                      gmsaCredentialSpec:
                        description: GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
                        type: string
                      gmsaCredentialSpecName:
                        description: GMSACredentialSpecName is the name of the GMSA credential spec to use.
                        type: string
                      runAsUserName:
                        description: The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                        type: string
                    type: object
                type: object
              runtimeClassName:
                description: "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14. \n copied to the Pod RunTimeClass, this will replace any existing value or previously applied Profile."
                type: string
              tolerations:
                description: "If specified, the function's pod tolerations. \n merged into the Pod Tolerations"
                items:
                  description: The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
                  properties:
                    effect:
                      description: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                      type: string
                    key:
                      description: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                      type: string
                    operator:
                      description: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
                      type: string
                    tolerationSeconds:
                      description: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                      format: int64
                      type: integer
                    value:
                      description: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
                      type: string
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: faas-controller
    heritage: Helm
    release: openfaas
  name: openfaas-controller
  namespace: openfaas
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: prometheus
    heritage: Helm
    release: openfaas
  name: openfaas-prometheus
  namespace: openfaas
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: faas-controller
    heritage: Helm
    release: openfaas
  name: openfaas-controller
  namespace: openfaas-fn
rules:
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
- apiGroups:
  - extensions
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
  - watch
  - create
  - delete
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  - namespaces
  - endpoints
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: prometheus
    heritage: Helm
    release: openfaas
  name: openfaas-prometheus-fn
  namespace: openfaas-fn
rules:
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: faas-controller
    heritage: Helm
    release: openfaas
  name: openfaas-profiles
  namespace: openfaas
rules:
- apiGroups:
  - openfaas.com
  resources:
  - profiles
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: prometheus
    heritage: Helm
    release: openfaas
  name: openfaas-prometheus
rules:
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: faas-controller
    heritage: Helm
    release: openfaas
  name: openfaas-controller
  namespace: openfaas-fn
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: openfaas-controller
subjects:
- kind: ServiceAccount
  name: openfaas-controller
  namespace: openfaas
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: prometheus
    heritage: Helm
    release: openfaas
  name: openfaas-prometheus-fn
  namespace: openfaas-fn
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: openfaas-prometheus-fn
subjects:
- kind: ServiceAccount
  name: openfaas-prometheus
  namespace: openfaas
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: faas-controller
    heritage: Helm
    release: openfaas
  name: openfaas-profiles
  namespace: openfaas
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: openfaas-profiles
subjects:
- kind: ServiceAccount
  name: openfaas-controller
  namespace: openfaas
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: prometheus
    heritage: Helm
    release: openfaas
  name: openfaas-prometheus
  namespace: openfaas
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: openfaas-prometheus
subjects:
- kind: ServiceAccount
  name: openfaas-prometheus
  namespace: openfaas
---
apiVersion: v1
data:
  alertmanager.yml: |
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 5s
      group_interval: 10s
      repeat_interval: 30s
      receiver: scale-up
      routes:
      - match:
          service: gateway
          receiver: scale-up
          severity: major

    inhibit_rules:
    - source_match:
        severity: 'critical'
      target_match:
        severity: 'warning'
      equal: ['alertname', 'cluster', 'service']

    receivers:
    - name: 'scale-up'
      webhook_configs:
        - url: http://gateway.openfaas:8080/system/alert
          send_resolved: true
          http_config:
            basic_auth:
              username: admin
              password_file: /var/secrets/basic-auth-password
kind: ConfigMap
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: alertmanager-config
    heritage: Helm
    release: openfaas
  name: alertmanager-config
  namespace: openfaas
---
apiVersion: v1
data:
  alert.rules.yml: |
    groups:
      - name: openfaas
        rules:
        - alert: service_down
          expr: up == 0
        - alert: APIHighInvocationRate
          expr: sum(increase(gateway_function_invocation_total{code="429"}[300s])) BY (function_name) > 0
          for: 2s
          labels:
            service: gateway
            severity: major
          annotations:
            description: High invocation total on "{{$labels.function_name}}"
            summary: High invocation total on "{{$labels.function_name}}"
  prometheus.yml: |
    global:
      scrape_interval:     10s
      evaluation_interval: 10s
      external_labels:
          monitor: 'faas-monitor'

    rule_files:
        - 'alert.rules.yml'

    scrape_configs:
      - job_name: 'prometheus'
        scrape_interval: 5s
        static_configs:
          - targets: ['localhost:9090']

      - job_name: 'kubernetes-pods'
        scrape_interval: 5s
        honor_labels: false
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - openfaas
                - openfaas-fn
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__

    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093
kind: ConfigMap
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: prometheus-config
    heritage: Helm
    release: openfaas
  name: prometheus-config
  namespace: openfaas
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: alertmanager
    heritage: Helm
    release: openfaas
  name: alertmanager
  namespace: openfaas
spec:
  ports:
  - port: 9093
    protocol: TCP
  selector:
    app: alertmanager
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: basic-auth-plugin
    heritage: Helm
    release: openfaas
  name: basic-auth-plugin
  namespace: openfaas
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: http
  selector:
    app: basic-auth-plugin
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: gateway
    heritage: Helm
    release: openfaas
  name: gateway
  namespace: openfaas
spec:
  ports:
  - name: http
    port: 8080
    protocol: TCP
    targetPort: http
  selector:
    app: gateway
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: gateway
    heritage: Helm
    release: openfaas
  name: gateway-external
  namespace: openfaas
spec:
  ports:
  - name: http
    nodePort: 31112
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: gateway
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: nats
    heritage: Helm
    release: openfaas
  name: nats
  namespace: openfaas
spec:
  ports:
  - name: clients
    port: 4222
    protocol: TCP
  selector:
    app: nats
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: prometheus
    heritage: Helm
    release: openfaas
  name: prometheus
  namespace: openfaas
spec:
  ports:
  - port: 9090
    protocol: TCP
  selector:
    app: prometheus
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: alertmanager
    heritage: Helm
    release: openfaas
  name: alertmanager
  namespace: openfaas
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      annotations:
        checksum/alertmanager-config: 163b82c22afa8cbe298c6c4e7091b2dec1adee311d9872f08296cc3e1c2f1802
        sidecar.istio.io/inject: "true"
      labels:
        app: alertmanager
    spec:
      containers:
      - command:
        - alertmanager
        - --config.file=/alertmanager.yml
        - --storage.path=/alertmanager
        - --cluster.listen-address=
        image: prom/alertmanager:v0.18.0
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /-/ready
            port: 9093
          timeoutSeconds: 30
        name: alertmanager
        ports:
        - containerPort: 9093
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9093
          timeoutSeconds: 30
        resources:
          limits:
            memory: 50Mi
          requests:
            memory: 25Mi
        volumeMounts:
        - mountPath: /alertmanager.yml
          name: alertmanager-config
          subPath: alertmanager.yml
        - mountPath: /var/secrets
          name: auth
          readOnly: true
      nodeSelector:
        beta.kubernetes.io/arch: amd64
      volumes:
      - configMap:
          items:
          - key: alertmanager.yml
            mode: 420
            path: alertmanager.yml
          name: alertmanager-config
        name: alertmanager-config
      - name: auth
        secret:
          secretName: basic-auth
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: basic-auth-plugin
    heritage: Helm
    release: openfaas
  name: basic-auth-plugin
  namespace: openfaas
spec:
  replicas: 1
  selector:
    matchLabels:
      app: basic-auth-plugin
  template:
    metadata:
      annotations:
        prometheus.io.scrape: "false"
      labels:
        app: basic-auth-plugin
    spec:
      containers:
      - env:
        - name: secret_mount_path
          value: /var/secrets
        - name: basic_auth
          value: "true"
        image: openfaas/basic-auth-plugin:0.20.1
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          timeoutSeconds: 5
        name: basic-auth-plugin
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 20m
            memory: 50Mi
        securityContext:
          readOnlyRootFilesystem: true
          runAsUser: 10001
        volumeMounts:
        - mountPath: /var/secrets
          name: auth
          readOnly: true
      nodeSelector:
        beta.kubernetes.io/arch: amd64
      volumes:
      - name: auth
        secret:
          secretName: basic-auth
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: gateway
    heritage: Helm
    release: openfaas
  name: gateway
  namespace: openfaas
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      annotations:
        prometheus.io.port: "8082"
        prometheus.io.scrape: "true"
      labels:
        app: gateway
    spec:
      containers:
      - env:
        - name: read_timeout
          value: 65s
        - name: write_timeout
          value: 65s
        - name: upstream_timeout
          value: 60s
        - name: functions_provider_url
          value: http://127.0.0.1:8081/
        - name: direct_functions
          value: "false"
        - name: direct_functions_suffix
          value: openfaas-fn.svc.cluster.local
        - name: function_namespace
          value: openfaas-fn
        - name: faas_nats_address
          value: nats.openfaas.svc.cluster.local
        - name: faas_nats_port
          value: "4222"
        - name: faas_nats_channel
          value: faas-request
        - name: basic_auth
          value: "true"
        - name: secret_mount_path
          value: /var/secrets
        - name: auth_proxy_url
          value: http://basic-auth-plugin.openfaas:8080/validate
        - name: auth_pass_body
          value: "false"
        - name: scale_from_zero
          value: "true"
        - name: max_idle_conns
          value: "1024"
        - name: max_idle_conns_per_host
          value: "1024"
        image: openfaas/gateway:0.18.18
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          timeoutSeconds: 5
        name: gateway
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 50m
            memory: 120Mi
        securityContext:
          readOnlyRootFilesystem: true
          runAsUser: 10001
        volumeMounts:
        - mountPath: /var/secrets
          name: auth
          readOnly: true
      - env:
        - name: port
          value: "8081"
        - name: function_namespace
          value: openfaas-fn
        - name: read_timeout
          value: 60s
        - name: profiles_namespace
          value: openfaas
        - name: write_timeout
          value: 60s
        - name: image_pull_policy
          value: Always
        - name: http_probe
          value: "true"
        - name: set_nonroot_user
          value: "false"
        - name: readiness_probe_initial_delay_seconds
          value: "2"
        - name: readiness_probe_timeout_seconds
          value: "1"
        - name: readiness_probe_period_seconds
          value: "2"
        - name: liveness_probe_initial_delay_seconds
          value: "2"
        - name: liveness_probe_timeout_seconds
          value: "1"
        - name: liveness_probe_period_seconds
          value: "2"
        - name: cluster_role
          value: "false"
        image: kind-registry:5000/cognitedata/faas-netes:ad29527
        imagePullPolicy: Always
        name: faas-netes
        ports:
        - containerPort: 8081
          protocol: TCP
        resources:
          requests:
            cpu: 50m
            memory: 120Mi
        securityContext:
          readOnlyRootFilesystem: true
          runAsUser: 10001
        volumeMounts:
        - mountPath: /tmp
          name: faas-netes-temp-volume
      nodeSelector:
        beta.kubernetes.io/arch: amd64
      serviceAccountName: openfaas-controller
      volumes:
      - emptyDir: {}
        name: faas-netes-temp-volume
      - name: auth
        secret:
          secretName: basic-auth
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: nats
    heritage: Helm
    release: openfaas
  name: nats
  namespace: openfaas
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nats
  template:
    metadata:
      annotations:
        prometheus.io.scrape: "false"
        sidecar.istio.io/inject: "false"
      labels:
        app: nats
    spec:
      containers:
      - args:
        - --store
        - memory
        - --cluster_id
        - faas-cluster
        command:
        - /nats-streaming-server
        image: nats-streaming:0.17.0
        imagePullPolicy: Always
        name: nats
        ports:
        - containerPort: 4222
          protocol: TCP
        resources:
          requests:
            memory: 120Mi
      nodeSelector:
        beta.kubernetes.io/arch: amd64
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: prometheus
    heritage: Helm
    release: openfaas
  name: prometheus
  namespace: openfaas
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      annotations:
        checksum/prometheus-config: e2a8f747438b46dc1a1b992c7ed9a8033a8f9ad1060726c82ac73ff9d3e4882d
        sidecar.istio.io/inject: "true"
      labels:
        app: prometheus
    spec:
      containers:
      - command:
        - prometheus
        - --config.file=/etc/prometheus/prometheus.yml
        image: prom/prometheus:v2.11.0
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          timeoutSeconds: 30
        resources:
          requests:
            memory: 512Mi
        volumeMounts:
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
        - mountPath: /etc/prometheus/alert.rules.yml
          name: prometheus-config
          subPath: alert.rules.yml
        - mountPath: /prometheus/data
          name: prom-data
      nodeSelector:
        beta.kubernetes.io/arch: amd64
      serviceAccountName: openfaas-prometheus
      volumes:
      - configMap:
          items:
          - key: prometheus.yml
            mode: 420
            path: prometheus.yml
          - key: alert.rules.yml
            mode: 420
            path: alert.rules.yml
          name: prometheus-config
        name: prometheus-config
      - emptyDir: {}
        name: prom-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: openfaas
    chart: openfaas-7.2.0
    component: queue-worker
    heritage: Helm
    release: openfaas
  name: queue-worker
  namespace: openfaas
spec:
  replicas: 1
  selector:
    matchLabels:
      app: queue-worker
  template:
    metadata:
      annotations:
        prometheus.io.scrape: "false"
      labels:
        app: queue-worker
    spec:
      containers:
      - env:
        - name: faas_nats_address
          value: nats.openfaas.svc.cluster.local
        - name: faas_nats_channel
          value: faas-request
        - name: faas_nats_queue_group
          value: faas
        - name: faas_gateway_address
          value: gateway.openfaas.svc.cluster.local
        - name: gateway_invoke
          value: "true"
        - name: faas_function_suffix
          value: .openfaas-fn.svc.cluster.local
        - name: max_inflight
          value: "1"
        - name: ack_wait
          value: 60s
        - name: secret_mount_path
          value: /var/secrets
        - name: basic_auth
          value: "true"
        image: kind-registry:5000/cognitedata/queue-worker:dda07bf-amd64
        imagePullPolicy: Always
        name: queue-worker
        resources:
          requests:
            cpu: 50m
            memory: 120Mi
        volumeMounts:
        - mountPath: /var/secrets
          name: auth
          readOnly: true
      nodeSelector:
        beta.kubernetes.io/arch: amd64
      volumes:
      - name: auth
        secret:
          secretName: basic-auth
